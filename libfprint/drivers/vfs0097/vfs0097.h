/*
 * Validity VFS0097 driver for libfprint
 * Copyright (C) 2017 Nikita Mikhailov <nikita.s.mikhailov@gmail.com>
 * Copyright (C) 2018 Marco Trevisan <marco@ubuntu.com>
 * Copyright (C) 2020 Viktor Smolov <smolovv@gmail.com>
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA
 */

#pragma once

#include "fpi-image-device.h"

#define DMI_PRODUCT_NAME_NODE "/sys/class/dmi/id/product_name"
#define DMI_PRODUCT_SERIAL_NODE "/sys/class/dmi/id/product_serial"

/* Timeout for all send/recv operations, except interrupt waiting and abort */
#define VFS_USB_TIMEOUT 500
/* Timeout for usb abort */
#define VFS_USB_ABORT_TIMEOUT 20
/* Default timeout for SSM timers */
#define VFS_SSM_TIMEOUT 100
/* Buffer size for abort and fprint receiving */
#define VFS_USB_BUFFER_SIZE 65536

/* The main driver structure */
struct _FpiDeviceVfs0097
{
  FpDevice   parent;

  guchar    *buffer;
  gsize      buffer_length;

  EC_KEY    *private_key;
  EC_KEY    *ecdh_q;
  gchar     *certificate;
  gsize      certificate_length;

  gchar     *seed;
  gsize      seed_length;

  GPtrArray *list_result;
};

G_DECLARE_FINAL_TYPE (FpiDeviceVfs0097, fpi_device_vfs0097, FPI, DEVICE_VFS0097, FpDevice)

/* SSM states for exec_command */
enum EXEC_COMMAND_SM {
  EXEC_COMMAND_SM_WRITE,
  EXEC_COMMAND_SM_READ,

  EXEC_COMMAND_SM_STATES,
};

/* SSM states for open */
enum INIT_SM {
  SEND_INIT_1,
  CHECK_INITIALIZED,
  SEND_INIT_2,
  GET_PARTITION_HEADER,
  SEND_INIT_4,
  GET_FLASH_INFO,
  READ_FLASH_TLS_DATA,

  INIT_KEYS,
  HANDSHAKE,

  INIT_SM_STATES,
};

/* SSM states for TLS handshake */
enum TLS_HANDSHAKE_SM {
  TLS_HANDSHAKE_SM_CLIENT_HELLO,
  TLS_HANDSHAKE_SM_GENERATE_CERTIFICATE,
  TLS_HANDSHAKE_SM_CLIENT_FINISHED,

  TLS_HANDSHAKE_STATES
};

/* Blocks of data from USB sniffer */

static const unsigned char PRE_KEY[] = {
  0x71, 0x7c, 0xd7, 0x2d, 0x09, 0x62, 0xbc, 0x4a,
  0x28, 0x46, 0x13, 0x8d, 0xbb, 0x2c, 0x24, 0x19,
  0x25, 0x12, 0xa7, 0x64, 0x07, 0x06, 0x5f, 0x38,
  0x38, 0x46, 0x13, 0x9d, 0x4b, 0xec, 0x20, 0x33,
};

static const unsigned char SIGN_KEY[] = {
  0x3a, 0x4c, 0x76, 0xb7, 0x6a, 0x97, 0x98, 0x1d,
  0x12, 0x74, 0x24, 0x7e, 0x16, 0x66, 0x10, 0xe7,
  0x7f, 0x4d, 0x9c, 0x9d, 0x07, 0xd3, 0xc7, 0x28,
  0xe5, 0x32, 0x91, 0x6b, 0xdd, 0x28, 0xb4, 0x54,
};

static const unsigned char DEVICE_KEY_X[] = {
  0xf7, 0x27, 0x65, 0x3b, 0x4e, 0x16, 0xce, 0x06,
  0x65, 0xa6, 0x89, 0x4d, 0x7f, 0x3a, 0x30, 0xd7,
  0xd0, 0xa0, 0xbe, 0x31, 0x0d, 0x12, 0x92, 0xa7,
  0x43, 0x67, 0x1f, 0xdf, 0x69, 0xf6, 0xa8, 0xd3,
};

static const unsigned char DEVICE_KEY_Y[] = {
  0xa8, 0x55, 0x38, 0xf8, 0xb6, 0xbe, 0xc5, 0x0d,
  0x6e, 0xef, 0x8b, 0xd5, 0xf4, 0xd0, 0x7a, 0x88,
  0x62, 0x43, 0xc5, 0x8b, 0x23, 0x93, 0x94, 0x8d,
  0xf7, 0x61, 0xa8, 0x47, 0x21, 0xa6, 0xca, 0x94,
};

static const unsigned char LABEL[] = {'G', 'W', 'K'};
static const unsigned char LABEL_SIGN[] = {'G', 'W', 'K', '_', 'S', 'I', 'G', 'N'};

static const unsigned char INIT_SEQUENCE_MSG1[] = { 0x01 };

static const unsigned char INIT_SEQUENCE_MSG2[] = { 0x19 };

static const unsigned char INIT_SEQUENCE_MSG3[] = { 0x43, 0x02 };

static const unsigned char INIT_SEQUENCE_MSG4[] = {
  0x06, 0x02, 0x00, 0x00, 0x01, 0x39, 0x17, 0xb3,
  0xdd, 0xa9, 0x13, 0x83, 0xb5, 0xbc, 0xac, 0x64,
  0xfa, 0x4a, 0xd3, 0x5d, 0xce, 0x96, 0x57, 0x0a,
  0x9d, 0x2d, 0x97, 0x4b, 0x80, 0x92, 0x6a, 0x43,
  0x1f, 0x9c, 0xd4, 0x62, 0x48, 0x98, 0x0a, 0x26,
  0x3c, 0x6f, 0xce, 0xf6, 0xa8, 0x28, 0x39, 0xa9,
  0x0b, 0x59, 0xac, 0x59, 0x08, 0x48, 0x85, 0x9a,
  0xfa, 0xc8, 0x17, 0xb7, 0xd5, 0x3b, 0xf5, 0x1c,
  0xd3, 0x20, 0x5c, 0x1b, 0x8f, 0x43, 0x04, 0x8b,
  0xe8, 0x25, 0x3c, 0x3b, 0xd2, 0x47, 0x93, 0x7c,
  0x83, 0x7a, 0xca, 0x8b, 0x18, 0xd3, 0xcc, 0x8e,
  0xe8, 0xc8, 0x97, 0x1a, 0xc4, 0xf6, 0x88, 0x81,
  0x3c, 0xf3, 0xd8, 0x55, 0x0d, 0x71, 0x49, 0x69,
  0x85, 0xb7, 0xec, 0x07, 0xff, 0x2d, 0xc7, 0x89,
  0x6d, 0x33, 0x0f, 0xda, 0xb2, 0x63, 0xa0, 0xee,
  0x43, 0x3a, 0x5c, 0x4b, 0xc9, 0x10, 0x43, 0x9d,
  0x1c, 0x61, 0x61, 0x85, 0x3f, 0xeb, 0x03, 0xf5,
  0x50, 0x22, 0x09, 0x50, 0x2e, 0x73, 0x08, 0xbe,
  0xb7, 0x91, 0x94, 0x73, 0xcf, 0xe6, 0x9f, 0x42,
  0x2c, 0x30, 0x50, 0x2d, 0x22, 0x6a, 0x4d, 0x0a,
  0x34, 0xd9, 0x6c, 0x8c, 0x77, 0x95, 0x6c, 0xf6,
  0x9d, 0xb8, 0xef, 0x6c, 0xf9, 0x27, 0xa3, 0xb5,
  0x78, 0x49, 0xd4, 0xaa, 0x8a, 0xd4, 0xb4, 0x42,
  0x66, 0x92, 0x3e, 0x34, 0xb8, 0x2a, 0x39, 0xc8,
  0x14, 0x6b, 0xa3, 0xcd, 0x70, 0x8c, 0x70, 0xdf,
  0xed, 0xb5, 0x0c, 0x2d, 0xe6, 0x1f, 0xeb, 0x45,
  0xb1, 0xd4, 0xf1, 0x95, 0x84, 0x29, 0x72, 0x03,
  0xf5, 0xfd, 0xc8, 0x65, 0x79, 0x5f, 0xec, 0x9d,
  0x64, 0x49, 0xf3, 0xba, 0x9b, 0x6f, 0x1e, 0x4b,
  0xed, 0x69, 0x8e, 0xe1, 0x51, 0xe8, 0x3d, 0x4d,
  0x87, 0x02, 0xf7, 0x6a, 0x40, 0x06, 0xcf, 0xa2,
  0x4d, 0x9b, 0x79, 0x78, 0x88, 0x20, 0x3b, 0x22,
  0x69, 0xf8, 0xa7, 0x7d, 0x52, 0x40, 0x34, 0xac,
  0x32, 0xe4, 0xaf, 0x58, 0xb8, 0x6e, 0xbc, 0x63,
  0x55, 0x2c, 0xb3, 0x5b, 0x12, 0xb2, 0x85, 0x25,
  0x5d, 0xea, 0xf3, 0xa3, 0x2b, 0xf4, 0x6c, 0xdc,
  0x5a, 0xd3, 0xbc, 0x1c, 0x9e, 0xd1, 0xbc, 0xc1,
  0x12, 0xc7, 0x21, 0x43, 0xf9, 0xae, 0xc5, 0x68,
  0xe2, 0xca, 0xcf, 0xa8, 0x9b, 0xa0, 0xc7, 0xbb,
  0x65, 0x59, 0x0d, 0x8b, 0x93, 0xe6, 0x87, 0x1a,
  0x33, 0xc6, 0xc6, 0x98, 0x3c, 0x0a, 0xcd, 0x04,
  0xe7, 0x37, 0xff, 0x55, 0xee, 0xe0, 0x24, 0xca,
  0x6b, 0x9a, 0x48, 0x33, 0x2c, 0x1a, 0x69, 0xa5,
  0xa3, 0xfd, 0xd2, 0x4b, 0x96, 0x4c, 0xf7, 0xe7,
  0xc5, 0x52, 0x29, 0xbb, 0x0b, 0x48, 0xa6, 0xe3,
  0x39, 0xeb, 0x2c, 0x42, 0xd0, 0x7e, 0xc8, 0x50,
  0xa4, 0xee, 0x78, 0x06, 0x60, 0xad, 0x6c, 0x77,
  0xff, 0xa3, 0x02, 0xa6, 0x3b, 0xd1, 0x94, 0x26,
  0x13, 0x4c, 0x45, 0x33, 0xd6, 0xf9, 0x67, 0x44,
  0x11, 0x63, 0xfb, 0x78, 0xb7, 0x35, 0x47, 0xc6,
  0x8a, 0x49, 0x3b, 0x2f, 0x80, 0x0d, 0x3c, 0xda,
  0xb8, 0x27, 0xb1, 0x16, 0x76, 0x27, 0x89, 0x99,
  0x2a, 0xae, 0x3c, 0x8a, 0xb3, 0x45, 0xa4, 0x9e,
  0xdd, 0x31, 0x2d, 0xfd, 0x2a, 0x27, 0xbc, 0x50,
  0x14, 0x27, 0xdc, 0x7f, 0xa0, 0x0a, 0xc3, 0xc5,
  0xc3, 0x65, 0x51, 0xdb, 0xb3, 0xd5, 0xca, 0xd8,
  0xd5, 0xbd, 0x7c, 0xea, 0x37, 0xe5, 0x8a, 0x31,
  0x30, 0x7a, 0x6d, 0x50, 0xe6, 0xae, 0x37, 0x9a,
  0x53, 0xf1, 0x36, 0x66, 0x78, 0xc0, 0x74, 0x1a,
  0x3d, 0x87, 0x2b, 0x8d, 0xcf, 0xef, 0xa7, 0xf6,
  0x31, 0x28, 0xdc, 0x82, 0x45
};

static const unsigned char INIT_SEQUENCE_MSG5[] = { 0x3e };

static const unsigned char INIT_SEQUENCE_RSP5[] = {
  0x00, 0x00, 0xef, 0x00, 0x40, 0x00, 0x00, 0x10,
  0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x05, 0x00,
  0x01, 0x04, 0x07, 0x00, 0x00, 0x10, 0x00, 0x00,
  0x00, 0x10, 0x00, 0x00, 0x02, 0x01, 0x02, 0x00,
  0x00, 0x20, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00,
  0x05, 0x05, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00,
  0x00, 0x80, 0x00, 0x00, 0x06, 0x06, 0x03, 0x00,
  0x00, 0x80, 0x04, 0x00, 0x00, 0x80, 0x00, 0x00,
  0x04, 0x03, 0x05, 0x00, 0x00, 0x00, 0x05, 0x00,
  0x00, 0x00, 0x03, 0x00
};

static const unsigned char INIT_SEQUENCE_MSG6[] = {
  0x40, 0x01, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x10, 0x00, 0x00
};


/* Known interrupts */
